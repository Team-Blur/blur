package com.blur.userservice.oauth.entity;


import java.security.Key;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import com.blur.userservice.api.entity.User;
import com.blur.userservice.api.repository.UserRepository;
import com.blur.userservice.oauth.service.CustomUserDetailsService;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
//@Transactional(readOnly = true)  // 기본적으로 트랜잭션 안에서만 데이터 변경하게 설정(그만큼 최적화 되어 읽는게 빨라짐)
@Service
public class JwtTokenProvider {

    // 나중에 key 변경 후, application.yml gitgnore하기
    @Value("${jwt.secret}")
    private String secretKey;

    // 토큰 유효시간 하루
    private long tokenValidTime = 24 * 60 * 60 * 1000L;

//    private final UserDetailsService userDetailsService;
    private final CustomUserDetailsService userDetailsService;

    private final UserRepository userRepository;

    private final Key key;

    // JWT 토큰 생성 (parameter List<String> roles 는 사용 안해서 제외)
    public String createToken(String userId, Integer userNo) {
        Date now = new Date();
        return Jwts.builder()
                .setSubject(userId)
                .claim("userNo", userNo)
                .setIssuedAt(now) // 토큰 발행 시간 정보
                .setExpiration(new Date(now.getTime() + tokenValidTime))
                .signWith(key, SignatureAlgorithm.HS256)
                .compact();
    }

    // JWT 복호화 해서 username 얻기
    public String getUsernameFromJwt(String jwt) {
        return getClaims(jwt).getBody().getId();
    }

    private Claims getClaims(String jwt) {
        try {
//            return Jwts.parser().setSigningKey(secretKey).parseClaimsJws(jwt);
        	return Jwts.parserBuilder()
        			.setSigningKey(key)
        			.build()
        			.parseClaimsJws(jwt)
        			.getBody();
        } catch (SecurityException ex) {
            log.info("Invalid JWT signature");
            throw ex;
        } catch (MalformedJwtException ex) {
            log.info("Invalid JWT token");
            throw ex;
        } catch (ExpiredJwtException ex) {
            log.info("Expired JWT token");
            throw ex;
        } catch (UnsupportedJwtException ex) {
            log.info("Unsupported JWT token");
            throw ex;
        } catch (IllegalArgumentException ex) {
            log.info("JWT claims string is empty.");
            throw ex;
        }
    }

    // JWT 복호화 해서 id 얻기
    public Long getUserIdFromJwt(String token) {
        Jws<Claims> claims = Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token);
        return Long.parseLong(String.valueOf(claims.getBody().get("user_id")));
    }

    /**
     * 구버전들
     */
//    // JWT 복호화 해서 유저 얻기
//    public User getUser(String token) {
//        Jws<Claims> claims = Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token);
//        String user_id = String.valueOf(claims.getBody().get("user_id"));
//        String user_seq = String.valueOf(claims.getBody().get("user_seq"));
//        if(user_seq.equals("null")){
//            // OAUTH 유저
//            return userRepository.findByUserId(user_id);
//        } else {
//            // 일반 회원 가입 // getById 금지
//            return userRepository.findByUserSeq(Long.parseLong(user_seq));
//        }
//    }

    // JWT 복호화 해서 userSeq얻기
//    public Long getUserSeq(String token) {
//        Jws<Claims> claims = Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token);
//        String user_id = String.valueOf(claims.getBody().get("user_id"));
//        String user_seq = String.valueOf(claims.getBody().get("user_seq"));
//        if(user_seq.equals("null")){
//            // OAUTH 유저
//            return userRepository.findByUserId(user_id).getUserSeq();
//        } else {
//            // 일반 회원 가입 // getById 금지
//            return Long.parseLong(user_seq);
//
//        }
//    }

    //    // JWT 복호화 해서 유저 얻기
    public User getUser(String token) {
        Jws<Claims> claims = Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token);
        String userNo = String.valueOf(claims.getBody().get("userNo"));
        return userRepository.findByUserNo(Integer.parseInt(userNo));
    }

    public Long getUserSeq(String token) {
        Jws<Claims> claims = Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token);
        String user_seq = String.valueOf(claims.getBody().get("user_seq"));
        return Long.parseLong(user_seq);
    }

    // JWT 토큰에서 인증 정보 조회
    public Authentication getAuthentication(String token) {
        // 이메일이 들어가야 함
//        UserDetails userDetails = userDetailsService.loadUserByUsername(this.getUserPk(token));
        UserDetails userDetails = userDetailsService.loadUserByUsername(this.getUser(token).getEmail());
        return new UsernamePasswordAuthenticationToken(userDetails, "", userDetails.getAuthorities());
    }

    // 토큰에서 회원 정보 추출
    public String getUserPk(String token) {
        return Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token).getBody().getSubject();
    }

    // Request의 Header에서 token 값을 가져옵니다. "X-AUTH-TOKEN" : "TOKEN값'
    // 22.01.09 X-AUTH-TOKEN 에서 AUTH로 1차 변경 -> 이 부분 회의 필요
    public String resolveToken(HttpServletRequest request) {
        return request.getHeader("Authorization");
    }

    // 토큰의 유효성 + 만료일자 확인
    public boolean validateToken(String jwtToken) {
        try {
            Jws<Claims> claims = Jwts.parser().setSigningKey(secretKey).parseClaimsJws(jwtToken);
            return !claims.getBody().getExpiration().before(new Date());
        } catch (ExpiredJwtException ex) {
            log.error("Expired JWT token");
            throw ex;
        }catch (Exception e) {
            return false;
        }
    }
}