spring:
  profiles.active: local
  # 데이터 소스 설정
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/blur?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true
    username: blur
    password: blur
    hikari:
      pool-name: jpa-hikari-pool
      maximum-pool-size: 5
      jdbc-url: ${spring.datasource.url}
      username: ${spring.datasource.username}
      password: ${spring.datasource.password}
      driver-class-name: ${spring.datasource.driver-class-name}
      data-source-properties:
        rewriteBatchedStatements: true
        
  # JPA 설정
  jpa:
    generate-ddl: true
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        hbm2ddl.import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
        current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext
        default_batch_fetch_size: ${chunkSize:100}
        jdbc.batch_size: 20
        order_inserts: true
        order_updates: true
        format_sql: true
        
  # Security OAuth
  security:
    oauth2.client:
      registration:
        google:
          clientId: '871343491779-e59od5bh6t12qa41cce5lkbu4ok745s5.apps.googleusercontent.com'
          clientSecret: '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'
          scope:
            - email
            - profile
        naver:
          clientId: 'kbnqJ8MXe1ujGFy2Bd77'
          clientSecret: 'FhgB0qWTta'
          clientAuthenticationMethod: post
          authorizationGrantType: authorization_code
          redirectUri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
          scope:
            - nickname
            - email
            - profile_image
          clientName: Naver
        kakao:
          clientId: '2820dd0f9d4da11c57a25ab3f29de16c'
          clientSecret: 'cXiw9put8fVqQ0rW436JqzJIdtSyRDWp'
          clientAuthenticationMethod: post
          authorizationGrantType: authorization_code
          redirectUri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
          scope:
            - profile_nickname
            - profile_image
            - account_email
          clientName: Kakao
      # Provider 설정
      provider:
        naver:
          authorizationUri: https://nid.naver.com/oauth2.0/authorize
          tokenUri: https://nid.naver.com/oauth2.0/token
          userInfoUri: https://openapi.naver.com/v1/nid/me
          userNameAttribute: response
        kakao:
          authorizationUri: https://kauth.kakao.com/oauth/authorize
          tokenUri: https://kauth.kakao.com/oauth/token
          userInfoUri: https://kapi.kakao.com/v2/user/me
          userNameAttribute: id

# cors 설정
cors:
  allowed-origins: 'http://localhost:3000'
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: '*'
  max-age: 3600

# jwt secret key 설정
jwt.secret: '8sknjlO3NPTBqo319DHLNqsQAfRJEdKsETOds'

# 토큰 관련 secret Key 및 RedirectUri 설정
app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpiry: 1800000
    refreshTokenExpiry: 604800000
  oauth2:
    authorizedRedirectUris:
      - http://localhost:3000/oauth/redirect




















#server.port: 8080
#
#spring:
#  application:
#    name: user-service
#    
## 데이터 소스 설정
#  datasource:
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    url: jdbc:mysql://localhost:3306/blur?serverTimezone=UTC&useUniCode=yes&characterEncoding=UTF-8
#    username: blur
#    password: blur
#    hikari:
#      pool-name: jpa-hikari-pool
#      maximum-pool-size: 5
#      jdbc-url: ${spring.datasource.url}
#      username: ${spring.datasource.username}
#      password: ${spring.datasource.password}
#      driver-class-name: ${spring.datasource.driver-class-name}
#      data-source-properties:
#        rewriteBatchedStatements: true
#    
## Security OAuth
#  security:
#    oauth2.client:
#      registration:
#        google:
#          clientId: '871343491779-e59od5bh6t12qa41cce5lkbu4ok745s5.apps.googleusercontent.com'
#          clientSecret: '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'
#          scope:
#            - email
#            - profile
#        naver:
#          clientId: 'kbnqJ8MXe1ujGFy2Bd77'
#          clientSecret: 'FhgB0qWTta'
#          clientAuthenticationMethod: post
#          authorizationGrantType: authorization_code
#          redirectUri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
#          scope:
#            - nickname
#            - email
#            - profile_image
#          clientName: Naver
#        kakao:
#          clientId: '2820dd0f9d4da11c57a25ab3f29de16c'
#          clientSecret: 'cXiw9put8fVqQ0rW436JqzJIdtSyRDWp'
#          clientAuthenticationMethod: post
#          authorizationGrantType: authorization_code
#          redirectUri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
#          scope:
#            - profile_nickname
#            - profile_image
#            - account_email
#          clientName: Kakao
#
##  zipkin:
##    base-url: http://127.0.0.1:9411
##    enabled: true
##  sleuth:
##    sampler:
##      probability: 1.0
##
##  config:
##    import: optional:configserver:http://127.0.0.1:8888
##  cloud:
##    config:
##      name: user-service
##      profile: dev
#
### \uB370\uC774\uD130 \uC18C\uC2A4 \uC124\uC815
##  datasource:
##    url: jdbc:postgresql://localhost:5432/userdb
##    driver-class-name: org.postgresql.Driver
##    username: postgres
##    password: admin
### jpa \uC124\uC815
##  jpa:
##    generate-ddl: true
##    hibernate:
##      ddl-auto: update
##    show-sql: true
##    properties:
##      hibernate:
##        dialect: org.hibernate.dialect.MySQL8Dialect
##        hbm2ddl.import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
##        current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext
##        default_batch_fetch_size: ${chunkSize:100}
##        jdbc.batch_size: 20
##        order_inserts: true
##        order_updates: true
##        format_sql: true
#
##  redis:
##    host: 127.0.0.1
##    port: 6379
##
##eureka:
##  client:
##    service-url:
##      defalutZone: http://localhost:8761/eureka
##    fetch-registry: true
##    register-with-eureka: true
##  instance:
##    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
##
##logging:
##  level:
##    com.blur: DEBUG
#
## cors \uC124\uC815
#cors:
#  allowed-origins: 'http://localhost:3000'
#  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
#  allowed-headers: '*'
#  max-age: 3600
#
#
### jpa query, parameter \uB85C\uADF8 (p6spy)
##decorator.datasource.p6spy:
##  enable-logging: true
#
## jwt secret key \uC124\uC815
#jwt.secret: '8sknjlO3NPTBqo319DHLNqsQAfRJEdKsETOds'
#
## \uD1A0\uD070 \uAD00\uB828 secret Key \uBC0F RedirectUri \uC124\uC815
#app:
#  auth:
#    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
#    tokenExpiry: 1800000
#    refreshTokenExpiry: 604800000
#  oauth2:
#    authorizedRedirectUris:
#      - http://localhost:3000/oauth/redirect
