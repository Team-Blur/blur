server:
  port: 9999

spring:
  application:
    name: blur-auth
    
#스웨거 설정  
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
      
  # 데이터 소스 설정
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://i8b307.p.ssafy.io:3307/blurAuth?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true
    username: ${DB_NAME}
    password: ${DB_PASSWORD}

    hikari:
      pool-name: jpa-hikari-pool
      maximum-pool-size: 5
      jdbc-url: ${spring.datasource.url}
      username: ${spring.datasource.username}
      password: ${spring.datasource.password}
      driver-class-name: ${spring.datasource.driver-class-name}
      data-source-properties:
        rewriteBatchedStatements: true
  # JPA 설정
  jpa:
    generate-ddl: false
    hibernate:
      ddl-auto: update
    show-sql: true
    database: mysql
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        hbm2ddl.import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
        current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext
        default_batch_fetch_size: ${chunkSize:100}
        jdbc.batch_size: 20
        order_inserts: true
        order_updates: true
        format_sql: true
  
  #redis 설정
  redis:
    host: 127.0.0.1
    port: 6379
  
  # Security OAuth
  security:
    oauth2.client:
      registration:
        google:
          clientId: ${GOOGLE_CLIENT}
          clientSecret: ${GOOGLE_SECRET}
          scope:
            - email
        naver:
          clientId: ${NAVER_CLIENT}
          clientSecret: ${NAVER_SECRET}
          clientAuthenticationMethod: post
          authorizationGrantType: authorization_code
          redirectUri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
          scope:
            - email
          clientName: Naver
        kakao:
          clientId: ${KAKAO_CLIENT}
          clientSecret: ${KAKAO_SECRET}
          clientAuthenticationMethod: post
          authorizationGrantType: authorization_code
          redirectUri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
          scope:
            - account_email
          clientName: Kakao
          
      # Provider 설정
      provider:
        naver:
          authorizationUri: https://nid.naver.com/oauth2.0/authorize
          tokenUri: https://nid.naver.com/oauth2.0/token
          userInfoUri: https://openapi.naver.com/v1/nid/me
          userNameAttribute: response
        kakao:
          authorizationUri: https://kauth.kakao.com/oauth/authorize
          tokenUri: https://kauth.kakao.com/oauth/token
          userInfoUri: https://kapi.kakao.com/v2/user/me
          userNameAttribute: id
          
mail:
  host: smtp.gmail.com
  port: 465
  protocol: smtp
  username: ${MAIL_NAME}
  password: ${MAIL_PASSWORD}
  debug: true
  smtp:
    auth: true
    starttls-tls-enable: true
    ssl:
      trust: smtp.gmail.com
      enable: true

# Eureka 설정
eureka:
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
  client:
    service-url:
      defaultZone: http://127.0.0.1:8761/eureka
    fetch-registry: true
    register-with-eureka: true

# cors 설정
#cors:
##  allowed-origins: 'http://localhost:3000'
#  allowed-origins: '*'
#  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
#  allowed-headers: '*'
#  max-age: 3600

# jwt secret key 설정
jwt.secret: ${JWT_SECRET}

# 토큰 관련 secret Key 및 RedirectUri 설정
app:
  auth:
    tokenSecret: ${APP_AUTH_SECRET}
    tokenExpiry: 1800000
    refreshTokenExpiry: 604800000
  oauth2:
    authorizedRedirectUris:
      - https://i8b307.p.ssafy.io/oauth/redirect

